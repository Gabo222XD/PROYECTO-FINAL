#include <Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>

#define SERVO_PIN 4
#define SENSOR_IR_PIN 12
#define BUZZER_PIN 13
#define TRIG_PIN 10
#define ECHO_PIN 11
#define DISTANCIA_DETECTADA 10

LiquidCrystal_I2C lcd(0x27, 16, 2);
Servo servo;

const byte FILAS = 4;
const byte COLUMNAS = 4;
char keys[FILAS][COLUMNAS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[FILAS] = {6, 7, 8, 9};
byte colPins[COLUMNAS] = {2, 3, 4, 5};
Keypad teclado = Keypad(makeKeymap(keys), rowPins, colPins, FILAS, COLUMNAS);

bool modoManual = false;
bool modoAutomatico = true;

unsigned long tiempoUltimoEstadoVacio = 0;
bool buzzerSonando = false;
unsigned long tiempoBuzzer = 0;

void abrirServo();

long medirDistanciaUltrasonico() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  return pulseIn(ECHO_PIN, HIGH) * 0.034 / 2;
}

void setup() {
  lcd.begin(16, 2);
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Aestrada TA22");
  lcd.setCursor(0, 1);
  lcd.print("Food Dispenser");
  delay(6000);
  lcd.clear();

  pinMode(SENSOR_IR_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  servo.attach(SERVO_PIN);
  servo.write(0);

  Serial.begin(9600);
  Serial.println("Sistema iniciado en modo AUTOMATICO");
}

void loop() {
  char tecla = teclado.getKey();
  int estadoComida = digitalRead(SENSOR_IR_PIN);
  long distancia = medirDistanciaUltrasonico();
  Serial.print("Distancia: ");
  Serial.print(distancia);
  Serial.println(" cm");

  if (estadoComida == LOW) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Plato LLENO <3");
    lcd.setCursor(0, 1);
    lcd.print("Buen Provecho");
    Serial.println("El plato está lleno. El servo está bloqueado.");
    tiempoUltimoEstadoVacio = millis();
    buzzerSonando = false;
    digitalWrite(BUZZER_PIN, LOW);
    servo.write(0);
  } else {
    Serial.println("El plato está vacío.");
    if (millis() - tiempoUltimoEstadoVacio >= 15000) {
      if (!buzzerSonando) {
        activarBuzzer(15000);
      }
    }
  }

  if (tecla == '1') {
    modoManual = true;
    modoAutomatico = false;
    Serial.println("Modo Manual activado. Duración: 1.5s");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Modo Manual 1.5s");
    abrirServoPorTiempo(1500);
    delay(2000);
  }

  if (tecla == '2') {
    modoManual = true;
    modoAutomatico = false;
    Serial.println("Modo Manual activado. Duración: 2.2s");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Modo Manual 2.2s");
    abrirServoPorTiempo(2200);
    delay(2000);
  }

  if (tecla == '3') {
    modoManual = true;
    modoAutomatico = false;
    Serial.println("Modo Manual activado. Duración: 3s");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Modo Manual 3.0s");
    abrirServoPorTiempo(3000);
    delay(2000);
  }

  if (tecla == 'A') {
    modoAutomatico = true;
    modoManual = false;
    Serial.println("Regresando a modo AUTOMATICO");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Modo Automatico");
    lcd.setCursor(0, 1);
    lcd.print("Deteccion Activa");
    delay(2000);
  }

  if (modoAutomatico) {
    static unsigned long tiempoAnterior = 0;
    unsigned long tiempoActual = millis();
    if (tiempoActual - tiempoAnterior >= 5000) {
      tiempoAnterior = tiempoActual;
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Nivel del plato:");
      estadoComida = digitalRead(SENSOR_IR_PIN);
      if (estadoComida == LOW) {
        lcd.setCursor(0, 1);
        lcd.print("LLENO");
        Serial.println("Nivel del plato: LLENO");
      } else {
        lcd.setCursor(0, 1);
        lcd.print("VACIO");
        Serial.println("Nivel del plato: VACIO");
      }
    }

    if (distancia < DISTANCIA_DETECTADA) {
      if (estadoComida == HIGH) {
        Serial.println("Perro detectado, dispensando comida.");
        abrirServo();
      } else {
        servo.write(0);
      }
    } else {
      servo.write(0);
    }
  }

  if (buzzerSonando) {
    if (millis() - tiempoBuzzer >= 15000) {
      buzzerSonando = false;
      digitalWrite(BUZZER_PIN, LOW);
      Serial.println("Buzzer apagado.");
    }
  }
}

void abrirServo() {
  servo.write(90);
  delay(500);
  servo.write(0);
}

void activarBuzzer(unsigned long tiempo) {
  buzzerSonando = true;
  tiempoBuzzer = millis();
  digitalWrite(BUZZER_PIN, HIGH);
  Serial.println("Activando buzzer.");
}

void abrirServoPorTiempo(int tiempo) {
  servo.write(90);
  delay(tiempo);
  servo.write(0);
}
